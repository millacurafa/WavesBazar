{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


let NONE = "none"

func getNumberByKey(key: String) = {
    let num = match getInteger(this, key) {
        case a:Int => a 
        case _ => 0
    }
    num
}

func getStrByKey(key: String) = {
    let str = match getString(this, key) {
        case a:String => a 
        case _ => NONE
    }
    str
}

func getKeyItemPrice(item: String) = {
    item + "_price"
}

func getValueItemPrice(item:String) = {
    getNumberByKey(getKeyItemPrice(item))
}

func getKeyUserItemCounter(user: String, item: String) = {
    item + "_" + user + "_cnt"
}

func getValueUserItemCounter(user: String, item: String) = {
    getNumberByKey(getKeyUserItemCounter(user, item))
}

func getKeyItem(supplier: String, title: String) = {
    "item_" + toBase58String(sha256(toBytes(supplier + title)))
}
func getKeyItemData(item: String) = {
    item + "_data"
} 

func getKeyItemSupplier(item: String) = {
    item + "_owner"
}
func getValueItemSupplier(item: String) = {
    getStrByKey(getKeyItemSupplier(item))
}
func getKeyBalanceSupplier(account: String) = {
    account + "_balance"
}

func getValueBalanceSupplier(account: String) = {
    getNumberByKey(getKeyBalanceSupplier(account))
}

let VOTERS = 3
let QUORUM = 2
let VOTING = "voting"
let REVEAL = "reveal"
let FEATURED = "featured"
let DELISTED = "delisted"

#Comment: Commit-Reveal Voting keys:

func getKeyCommit(item: String, user: String) = {
    item + "_" + user + "_commit"
}
func getValueCommit(item: String, user: String) = {
    getStrByKey(getKeyCommit(item, user))
}
func getKeyCommitsCount(item: String) = {
    item + "_comcnt"
}
func getValueCommitsCount(item: String) = {
    getNumberByKey(getKeyCommitsCount(item))
}
func getKeyReveal(item: String, user: String) = {
    item + "_" + user + "_reveal"
}
func getValueReveal(item: String, user: String) = {
    getStrByKey(getKeyReveal(item, user))
}
func getKeyItemStatus(item: String) = {
    item + "_status"
}
func getValueItemStatus(item: String) = {
    getStrByKey(getKeyItemStatus(item))
}
func getKeyVoteCount(item: String, vote: String) = {
    item + "_res:" + vote
}
func getValueVoteCount(item: String, vote: String) = {
    getNumberByKey(getKeyVoteCount(item, vote))
}
func getExtAddressOracle() = {
    extract(addressFromString("3N2j5qyw6oAZs6mbey6SqefmmTuFNLAKFHx"))
}
let BLACKLISTED = "blacklist"

func getExtKeyItemWhiteListStatus(account: String) = {
    account + "_verifier_status"
}
func getExtValueItemWhitelistStatus(oracle: Address, account: String) = {
    let str = match getString(oracle, getExtKeyItemWhiteListStatus(account)){
        case a: String => a 
        case _ => NONE
    }
    str
}

@Callable(i)
func voteReveal(item: String, vote: String, salt: String) = {
    let user = toBase58String(i.caller.bytes)
    let status = getValueItemStatus(item)
    let newVoteCount = getValueVoteCount(item, vote) + 1
    if (toBase58String(sha256(toBytes(vote + salt))) != getValueCommit(item, user))
    then throw("reveal data not valid")
    else if (getValueCommitsCount(item) < VOTERS) then throw("max number of votes not reached")
    else if (getValueReveal(item, user) != NONE) then throw("user already in the register")
    else if (status != VOTING && status != REVEAL) then throw("wrong status")
    else if (vote != FEATURED && vote != DELISTED) then throw("wrong vote")
    else if (status == FEATURED || status == DELISTED) then throw("vote has finished")
    else{
        WriteSet([
        DataEntry(getKeyReveal(item, user), vote),
        DataEntry(getKeyVoteCount(item, vote), newVoteCount),
        DataEntry(getKeyItemStatus(item), if(newVoteCount >= QUORUM) then vote else REVEAL)
        ])
    }
}


@Callable(i)
func voteCommit(item: String, hash:String) = {
    let user = toBase58String(i.caller.bytes)
    let commits = getValueCommitsCount(item)
    let status = getValueItemStatus(item)
    if ( commits >= VOTERS) then throw("reached max num voters")
    else if (getValueCommit(item, user) != NONE) then throw("user has already voted")
    else if (getKeyItemSupplier(item) == NONE) then throw("item does not exist")
    else if (status !=NONE && status != VOTING) then throw("voting is not possible")
    else {
        WriteSet([
        DataEntry(getKeyCommit(item, user), hash),
        DataEntry(getKeyCommitsCount(item), commits + 1),
        DataEntry(getKeyItemStatus(item), if(commits == VOTERS) then REVEAL else VOTING)
        ])
    }
}
@Callable(i)
func purchase(item:String) ={
    let pmt = extract(i.payment)
    if (isDefined(pmt.assetId)) then throw("just Waves accepted")
    else{
        let userAddress = toBase58String(i.caller.bytes)
        let price = getValueItemPrice(item)
        let supplierAddress = getValueItemSupplier(item)
        if (pmt.amount < price) then throw("you are trying to pay less, don't be greedy")
        else if (pmt.amount > price) then throw("thanks for your kind donation, but let's pay just wat is needed")
        else if (supplierAddress == NONE) then throw("supplier not availabel in register")
        else {
            WriteSet([
            DataEntry(getKeyUserItemCounter(userAddress, item), getValueUserItemCounter(userAddress, item) +1),
            DataEntry(getKeyBalanceSupplier(supplierAddress), getValueBalanceSupplier(supplierAddress) + pmt.amount)
            ])
        }
    }
}

@Callable(i)
func withdraw() = {
    let supplierAddress = toBase58String(i.caller.bytes)
    let balance = getValueBalanceSupplier(supplierAddress)
    if (balance <= 0)
        then throw("you don't have enough balance")
        else ScriptResult(
            WriteSet([
            DataEntry(getKeyBalanceSupplier(supplierAddress), 0)
            ]),
            TransferSet([
            ScriptTransfer(
            addressFromStringValue(supplierAddress), balance, unit
            )])
        )

}

@Callable(i)
func addItem(title: String, price: Int, data: String) = {
    let supplierAddress = toBase58String(i.caller.bytes)
    let item = getKeyItem(supplierAddress, title)
    let supplierwhitelist = getExtValueItemWhitelistStatus(getExtAddressOracle(), supplierAddress)
    if ( price <= 0 ) then throw("amount lower than item price")
    else if ( getValueItemSupplier(item) != NONE ) then throw("an item already exists")
    else if (supplierwhitelist == BLACKLISTED) then throw("supplier's account has been blacklisted")
    else {
        WriteSet([
            DataEntry(getKeyItemSupplier(item), supplierAddress),
            DataEntry(getKeyItemPrice(item), price),
            DataEntry(getKeyItemData(item), data),
            DataEntry(getExtKeyItemWhiteListStatus(supplierAddress), supplierwhitelist)
        ])
    }
}
